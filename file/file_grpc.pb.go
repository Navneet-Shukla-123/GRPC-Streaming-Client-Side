// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: file.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MyStreamingService_SendData_FullMethodName = "/file.myStreamingService/SendData"
)

// MyStreamingServiceClient is the client API for MyStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyStreamingServiceClient interface {
	SendData(ctx context.Context, opts ...grpc.CallOption) (MyStreamingService_SendDataClient, error)
}

type myStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyStreamingServiceClient(cc grpc.ClientConnInterface) MyStreamingServiceClient {
	return &myStreamingServiceClient{cc}
}

func (c *myStreamingServiceClient) SendData(ctx context.Context, opts ...grpc.CallOption) (MyStreamingService_SendDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyStreamingService_ServiceDesc.Streams[0], MyStreamingService_SendData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &myStreamingServiceSendDataClient{stream}
	return x, nil
}

type MyStreamingService_SendDataClient interface {
	Send(*RequestBody) error
	CloseAndRecv() (*ResponseBody, error)
	grpc.ClientStream
}

type myStreamingServiceSendDataClient struct {
	grpc.ClientStream
}

func (x *myStreamingServiceSendDataClient) Send(m *RequestBody) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myStreamingServiceSendDataClient) CloseAndRecv() (*ResponseBody, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyStreamingServiceServer is the server API for MyStreamingService service.
// All implementations must embed UnimplementedMyStreamingServiceServer
// for forward compatibility
type MyStreamingServiceServer interface {
	SendData(MyStreamingService_SendDataServer) error
	mustEmbedUnimplementedMyStreamingServiceServer()
}

// UnimplementedMyStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMyStreamingServiceServer struct {
}

func (UnimplementedMyStreamingServiceServer) SendData(MyStreamingService_SendDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedMyStreamingServiceServer) mustEmbedUnimplementedMyStreamingServiceServer() {}

// UnsafeMyStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyStreamingServiceServer will
// result in compilation errors.
type UnsafeMyStreamingServiceServer interface {
	mustEmbedUnimplementedMyStreamingServiceServer()
}

func RegisterMyStreamingServiceServer(s grpc.ServiceRegistrar, srv MyStreamingServiceServer) {
	s.RegisterService(&MyStreamingService_ServiceDesc, srv)
}

func _MyStreamingService_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyStreamingServiceServer).SendData(&myStreamingServiceSendDataServer{stream})
}

type MyStreamingService_SendDataServer interface {
	SendAndClose(*ResponseBody) error
	Recv() (*RequestBody, error)
	grpc.ServerStream
}

type myStreamingServiceSendDataServer struct {
	grpc.ServerStream
}

func (x *myStreamingServiceSendDataServer) SendAndClose(m *ResponseBody) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myStreamingServiceSendDataServer) Recv() (*RequestBody, error) {
	m := new(RequestBody)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyStreamingService_ServiceDesc is the grpc.ServiceDesc for MyStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.myStreamingService",
	HandlerType: (*MyStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _MyStreamingService_SendData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file.proto",
}
